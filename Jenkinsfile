// This Jenkinsfile is used by Jenkins to run the Orthopairs step of Reactome's release.
// This step downloads Orthology data from pantherdb.org and generates a set of orthology mapping files 
// for each species projected to. It also finds the gene names associated with each gene identifier via UniProt. 

import org.reactome.release.jenkins.utilities.Utilities

// Shared library maintained at 'release-jenkins-utils' repository.
def utils = new Utilities()

pipeline{
	agent any

        environment {
		ECR_URL = 'public.ecr.aws/reactome/release-orthopairs'
	        CONT_NAME = 'orthopairs_container'
		DOWNLOAD_DIR = "downloads"
        }
	
	stages{
		// This stage checks that an upstream step, ConfirmReleaseConfigs, was run successfully.
		stage('Check ConfirmReleaseConfigs build succeeded'){
			steps{
				script{
					utils.checkUpstreamBuildsSucceeded("ConfirmReleaseConfigs")
				}
			}
		}
		// Download two orthology files, Orthologs_HCOP.tar.gz and QfO_Genome_Orthologs.tar.gz, generated by PANTHER used to create the Reactome orthology mappings.
		stage('Setup: Download ortholog files from PANTHER'){
			steps{
				script{
					sh "mkdir -p $DOWNLOAD_DIR"
					sh "rm -f $DOWNLOAD_DIR/*"
					dir(DOWNLOAD_DIR) {
					    def hcopFilename = "Orthologs_HCOP.tar.gz";
					    def qfoFilename = "QfO_Genome_Orthologs.tar.gz";
					    def pantherReleaseURL = "ftp://ftp.pantherdb.org/ortholog/current_release"
					    sh """
	                                       set -e
					       wget -q ${pantherReleaseURL}/${hcopFilename}
					       tar -xvf ${hcopFilename}
					       wget -q ${pantherReleaseURL}/${qfoFilename}
					       tar -xvf ${qfoFilename}
					    """
					}
				}
			}
		}
		// Download files that contain mapping links between UniProt identifiers and identifiers specific to model organism dbs.
		stage('Setup: Download alternate ID mapping files from model organism databases'){
			steps{
				script{
				    dir(DOWNLOAD_DIR) {
					sh """
                                            set -e
                                            wget -q -O mmus_alternate_ids.txt http://www.informatics.jax.org/downloads/reports/HGNC_AllianceHomology.rpt
					    wget -q -O rnor_alternate_ids.txt https://download.rgd.mcw.edu/data_release/GENES_RAT.txt
					    wget -q -O xtro_alternate_ids.txt https://ftp.xenbase.org/pub/GenePageReports/GenePageEnsemblModelMapping.txt
					    wget -q -O drer_alternate_ids.txt https://zfin.org/downloads/ensembl_1_to_1.txt
					"""
				    }
				}
			}
		}
		stage('Pull Orthopairs Docker container') {
			steps{
				script {
                			sh "docker pull ${ECR_URL}:latest"
					sh """
						if docker ps -a --format '{{.Names}}' | grep -Eq '${CONT_NAME}'; then
							docker rm -f ${CONT_NAME}
						fi
					"""
				}
			}
		}
		// This stage executes the Orthopairs jar file, producing all Orthopairs files used by Orthoinference.
		stage('Main: Generate Orthopairs files') {
			steps {
				script {
					def releaseVersion = utils.getReleaseVersion()

					// The credentials used here are a config file uploaded to Jenkins.
					withCredentials([file(credentialsId: 'Config', variable: 'ConfigFile')]) {
						sh """
      							mkdir -p output
							rm -rf output/*
							docker run \\
							-v \$(pwd)/output:output \\
							-v \$(pwd)/$DOWNLOAD_DIR:/opt/release-orthopairs/downloads \\
							-v $ConfigFile:/tmp/config.properties \\
							-v \$(pwd)/src/main/resources:/opt/release-orthopairs/src/main/resources \\
							--name ${CONT_NAME} \\
							${ECR_URL}:latest \\
							/bin/bash -c \'java -jar target/orthopairs-*-jar-with-dependencies.jar /tmp/config.properties && mv $releaseVersion output/\'
						"""
					}
				}
			}
		}
		// This stage compares the line counts of the orthopairs files generated between the current and previous release.
		// An intelligible output should be visible in the console logs for the build.
		stage('Post: Orthopairs file line counts') {
		    steps {
		        script {
		            def releaseVersion = utils.getReleaseVersion()
		            def previousReleaseVersion = 92
		            def currentDir = pwd()
		            sh "mkdir -p ${previousReleaseVersion}/"
		            sh "aws s3 --recursive --no-progress cp s3://reactome/private/releases/${previousReleaseVersion}/orthopairs/data/orthopairs/ ${previousReleaseVersion}/"
		            sh "gunzip -q ${previousReleaseVersion}/*"
		            utils.outputLineCountsOfFilesBetweenFolders("output/$releaseVersion", "$previousReleaseVersion", "$currentDir")
		            sh "rm -r ${previousReleaseVersion}"
		        }
		    }
		}
		// Logs and data files generated by this step are archived in the Reactome S3 bucket.
		// All files are then deleted on the server.
		stage('Post: Archive Outputs'){
			steps{
				script{
					def releaseVersion = utils.getReleaseVersion()
					sh "mkdir -p orthopairs/"
					sh "mv output/${releaseVersion}/* orthopairs/"
					def dataFiles = ["orthopairs", "downloads/*alternate_ids.txt", "downloads/*.gz"]
					// Log files are automatically output to a 'logs' folder, so nothing needs to be specified here.
					def logFiles = []
					def foldersToDelete = []
					utils.cleanUpAndArchiveBuildFiles("orthopairs", dataFiles, logFiles, foldersToDelete)
					sh "rm downloads/*Orthologs*"
				}
			}
		}
	}
}
